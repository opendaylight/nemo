/*
 * Copyright (c) 2015 Huawei, Inc. and others. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
/* Generated By:JavaCC: Do not edit this line. NEMOparserTokenManager.java */
package user.vnspacemanager.languagestyle.NEMOParse;
import junit.framework.TestCase;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.NEMOParse.NEMOparser;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.NEMOParse.NEMOparserTokenManager;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.NEMOParse.SimpleCharStream;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.NEMOParse.Token;

import java.io.IOException;
import java.io.PrintStream;
import java.io.Reader;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
/**
 * Created by zhangmeng on 2015/12/17.
 */
public class NEMOparserTokenManagerTest extends TestCase {
    private SimpleCharStream simpleCharStream;
    private int lexState;
    private NEMOparserTokenManager nemOparserTokenManager;
    private Class<NEMOparserTokenManager> class1;
    private Field field;
    @Before
    public void setUp() throws Exception {
        class1 = NEMOparserTokenManager.class;
        field = class1.getDeclaredField("input_stream");
        field.setAccessible(true);

        simpleCharStream = mock(SimpleCharStream.class);
        lexState = 0;
    }

    @Test
    public void Init_ReInit() throws Exception{
        nemOparserTokenManager = new NEMOparserTokenManager(simpleCharStream);
        NEMOparserTokenManager.ReInit(null);
        nemOparserTokenManager = new NEMOparserTokenManager(simpleCharStream,lexState);//curLexstate = 0
        NEMOparserTokenManager.ReInit(null, lexState);

        Assert.assertTrue(field.get(class1) == null);
    }

    @Test
    public void testSetDebugStream() throws Exception {
        NEMOparserTokenManager.setDebugStream(null);
        Field field1 = class1.getField("debugStream");
        Assert.assertTrue(field1.get(class1) == null);
    }


    @Test
    public void testJjFillToken() throws Exception {
        /*
        *  tested  in method "testGetNextToken"
        * */
    }

    @Test
    public void testGetNextToken() throws Exception {
//        Class<SimpleCharStream> simpleCharStreamClass = SimpleCharStream.class;
//        Field field1 = simpleCharStreamClass.getDeclaredField("")
        nemOparserTokenManager = new NEMOparserTokenManager(simpleCharStream);
        Assert.assertTrue(field.get(class1) == simpleCharStream);

        simpleCharStream = new SimpleCharStream(new Reader() {
            @Override
            public int read(char[] cbuf, int off, int len) throws IOException {
                return 0;
            }

            @Override
            public void close() throws IOException {

            }
        }, 1, 1, 1);
//        System.out.println("BeginToken" + SimpleCharStream.BeginToken());

//        System.out.println(SimpleCharStream.BeginToken());
//        NEMOparserTokenManager.getNextToken();
    }
}