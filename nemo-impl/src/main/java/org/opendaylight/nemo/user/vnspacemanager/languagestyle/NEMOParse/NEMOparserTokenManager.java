/*
 * Copyright (c) 2015 Huawei, Inc. and others. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
/* Generated By:JavaCC: Do not edit this line. NEMOparserTokenManager.java */
package org.opendaylight.nemo.user.vnspacemanager.languagestyle.NEMOParse;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.updateintentlang.UpdateNodeLang;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.updateintentlang.UpdateConnectionLang;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.updateintentlang.UpdateFlowLang;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.updateintentlang.UpdateOperationLang;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.deleteintentlang.DeleteNodeLang;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.deleteintentlang.DeleteConnectionLang;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.deleteintentlang.DeleteFlowLang;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.deleteintentlang.DeleteOperationLang;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.Query;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.NEMOConstants;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.updateintentlang.UpdateTemplateDefinitionLang;
import org.opendaylight.controller.md.sal.binding.api.DataBroker;
import org.opendaylight.nemo.user.tenantmanager.TenantManage;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.nemo.common.rev151010.UserId;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.ArrayList;
import java.io.StringReader;

/** Token Manager. */
public class NEMOparserTokenManager implements NEMOparserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x74800000000000L) != 0L)
         {
            jjmatchedKind = 56;
            return 205;
         }
         if ((active0 & 0x3000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            return 81;
         }
         return -1;
      case 1:
         if ((active0 & 0x77800000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
            return 205;
         }
         return -1;
      case 2:
         if ((active0 & 0x77800000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 2;
            }
            return 205;
         }
         return -1;
      case 3:
         if ((active0 & 0x77800000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 3;
            }
            return 205;
         }
         return -1;
      case 4:
         if ((active0 & 0x35000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
            return 205;
         }
         if ((active0 & 0x42800000000000L) != 0L)
            return 205;
         return -1;
      case 5:
         if ((active0 & 0x25000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
            return 205;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 205;
         return -1;
      case 6:
         if ((active0 & 0x5000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 6;
            return 205;
         }
         if ((active0 & 0x20000000000000L) != 0L)
            return 205;
         return -1;
      case 7:
         if ((active0 & 0x5000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 7;
            return 205;
         }
         return -1;
      case 8:
         if ((active0 & 0x5000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 8;
            return 205;
         }
         return -1;
      case 9:
         if ((active0 & 0x4000000000000L) != 0L)
            return 205;
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 9;
            return 205;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 14);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 40:
         return jjStopAtPos(0, 8);
      case 41:
         return jjStopAtPos(0, 9);
      case 42:
         return jjStopAtPos(0, 20);
      case 44:
         return jjStopAtPos(0, 6);
      case 58:
         return jjStopAtPos(0, 5);
      case 59:
         return jjStopAtPos(0, 7);
      case 60:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 62:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x8282000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x400400000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x40800000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x8000020000000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x80100000000L);
      case 81:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x104040000000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 91:
         return jjStopAtPos(0, 10);
      case 93:
         return jjStopAtPos(0, 11);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      case 61:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         break;
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40005000000000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000800000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20400400000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x98082a0000000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x4002000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c0100000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      case 124:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      case 100:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8800420000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4022000000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x41008280000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2040900000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x10004000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x20011000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0xa000000L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(3, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0x28800000000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x40004000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10210000000000L);
      case 109:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(3, 42);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1100600000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4022000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 119:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(3, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x1a000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4002080000000L);
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 205);
         return jjMoveStringLiteralDfa5_0(active0, 0x1004300000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      case 104:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(4, 36);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(4, 45);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10400000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 205);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 205);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 121:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(4, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 25);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(5, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(5, 28);
         break;
      case 84:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(5, 26);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000200000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L);
      case 103:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 205);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80080000000L);
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(5, 40);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(5, 38);
         return jjMoveStringLiteralDfa6_0(active0, 0x400a000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x400a000000000L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(6, 31);
         break;
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 205);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x1080300000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000200000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x400a000000000L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(7, 34);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 121:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(7, 32);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(7, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L);
      case 108:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(8, 51);
         break;
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(8, 37);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(8, 39);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000200000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(9, 33);
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L);
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 50, 205);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(10, 44);
         break;
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 48, 205);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 205;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 4);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(5, 6);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAddStates(7, 9);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(1);
                  }
                  if (curChar == 50)
                     jjAddStates(10, 11);
                  else if (curChar == 49)
                     jjCheckNAddStates(12, 14);
                  if (curChar == 50)
                     jjAddStates(15, 17);
                  break;
               case 81:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(203, 204);
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(201, 202);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(204);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(202);
                  }
                  break;
               case 205:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(203, 204);
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(201, 202);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(204);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(202);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if (curChar == 58)
                     jjCheckNAddStates(18, 20);
                  break;
               case 3:
                  if (curChar == 48)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (curChar == 58)
                     jjCheckNAddStates(21, 23);
                  break;
               case 6:
                  if (curChar == 48)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 8:
                  if ((0x3e000000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 9:
                  if ((0x3e000000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 10:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAddStates(7, 9);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if (curChar == 46)
                     jjCheckNAddStates(24, 28);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if (curChar == 46)
                     jjCheckNAddStates(29, 33);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if (curChar == 46)
                     jjCheckNAddStates(34, 38);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if (curChar == 47)
                     jjAddStates(39, 41);
                  break;
               case 20:
                  if ((0x3fe000000000000L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 21:
                  if ((0x6000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 23:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x7000000000000L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 25:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 26:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 28:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x1f000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 30:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x3f000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(19);
                  break;
               case 32:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 33:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 34:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 36:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x1f000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 38:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3f000000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 40:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 41:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 42:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 44:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x1f000000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 46:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x3f000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 48:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if (curChar == 46)
                     jjCheckNAddStates(42, 46);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if (curChar == 46)
                     jjCheckNAddStates(47, 51);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if (curChar == 46)
                     jjCheckNAddStates(52, 56);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 56:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 57:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 59:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x1f000000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 61:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0x3f000000000000L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 63:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 64:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 65:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 67:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x1f000000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 69:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 70:
                  if ((0x3f000000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 71:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 72:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 73:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 75:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x1f000000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 77:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if ((0x3f000000000000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 79:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(5, 6);
                  break;
               case 82:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 85:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 88:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 97:
                  if (curChar == 47)
                     jjAddStates(57, 59);
                  break;
               case 98:
                  if ((0x3fe000000000000L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 99:
                  if ((0xe000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 101:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 102:
                  if ((0x1ff000000000000L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 107:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 4);
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 123:
                  if (curChar == 45)
                     jjCheckNAddStates(60, 64);
                  break;
               case 124:
                  if ((0x1aa000000000000L & l) != 0L)
                     jjCheckNAdd(125);
                  break;
               case 125:
                  if (curChar == 45)
                     jjCheckNAddStates(65, 68);
                  break;
               case 126:
               case 134:
               case 139:
                  if (curChar == 48)
                     jjCheckNAdd(127);
                  break;
               case 127:
                  if ((0x3fe000000000000L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 128:
               case 135:
               case 140:
                  if ((0x6000000000000L & l) != 0L)
                     jjCheckNAdd(129);
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 130:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 131:
                  if ((0x3000000000000L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 132:
                  if ((0x250000000000000L & l) != 0L)
                     jjCheckNAdd(133);
                  break;
               case 133:
                  if (curChar == 45)
                     jjCheckNAddStates(69, 72);
                  break;
               case 136:
                  if (curChar == 48 && kind > 60)
                     kind = 60;
                  break;
               case 137:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 45)
                     jjCheckNAddStates(73, 75);
                  break;
               case 141:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 142:
                  if (curChar == 48)
                     jjCheckNAddStates(76, 78);
                  break;
               case 143:
                  if (curChar == 49)
                     jjAddStates(79, 81);
                  break;
               case 144:
                  if (curChar == 48)
                     jjCheckNAdd(125);
                  break;
               case 145:
                  if (curChar == 50)
                     jjCheckNAdd(125);
                  break;
               case 146:
                  if (curChar == 49)
                     jjCheckNAdd(133);
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 150:
                  if (curChar == 45)
                     jjCheckNAddStates(82, 86);
                  break;
               case 151:
                  if ((0x1aa000000000000L & l) != 0L)
                     jjCheckNAdd(152);
                  break;
               case 152:
                  if (curChar == 45)
                     jjCheckNAddStates(87, 90);
                  break;
               case 153:
               case 175:
               case 180:
                  if (curChar == 48)
                     jjCheckNAdd(154);
                  break;
               case 154:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAdd(155);
                  break;
               case 155:
                  if (curChar == 44)
                     jjCheckNAddStates(91, 94);
                  break;
               case 156:
                  if (curChar == 48)
                     jjCheckNAdd(157);
                  break;
               case 157:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(158);
                  break;
               case 158:
                  if (curChar == 58)
                     jjCheckNAddStates(95, 97);
                  break;
               case 159:
                  if (curChar == 48)
                     jjCheckNAdd(160);
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 161:
                  if (curChar == 58)
                     jjCheckNAddStates(98, 100);
                  break;
               case 162:
                  if (curChar == 48)
                     jjCheckNAdd(163);
                  break;
               case 163:
                  if ((0x3ff000000000000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 164:
                  if ((0x3e000000000000L & l) != 0L)
                     jjCheckNAdd(163);
                  break;
               case 165:
                  if ((0x3e000000000000L & l) != 0L)
                     jjCheckNAdd(160);
                  break;
               case 166:
                  if (curChar == 49)
                     jjCheckNAdd(157);
                  break;
               case 167:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 168:
                  if ((0xf000000000000L & l) != 0L)
                     jjCheckNAdd(158);
                  break;
               case 169:
               case 176:
               case 181:
                  if ((0x6000000000000L & l) != 0L)
                     jjCheckNAdd(170);
                  break;
               case 170:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(155);
                  break;
               case 171:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 172:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAdd(155);
                  break;
               case 173:
                  if ((0x250000000000000L & l) != 0L)
                     jjCheckNAdd(174);
                  break;
               case 174:
                  if (curChar == 45)
                     jjCheckNAddStates(101, 104);
                  break;
               case 177:
                  if (curChar == 48)
                     jjCheckNAdd(155);
                  break;
               case 178:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 45)
                     jjCheckNAddStates(105, 107);
                  break;
               case 182:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 183:
                  if (curChar == 48)
                     jjCheckNAddStates(108, 110);
                  break;
               case 184:
                  if (curChar == 49)
                     jjAddStates(111, 113);
                  break;
               case 185:
                  if (curChar == 48)
                     jjCheckNAdd(152);
                  break;
               case 186:
                  if (curChar == 50)
                     jjCheckNAdd(152);
                  break;
               case 187:
                  if (curChar == 49)
                     jjCheckNAdd(174);
                  break;
               case 188:
                  if (curChar == 49)
                     jjCheckNAddStates(12, 14);
                  break;
               case 189:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 190:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 191:
                  if (curChar == 50)
                     jjAddStates(15, 17);
                  break;
               case 192:
                  if ((0x1f000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 193:
                  if ((0xf000000000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 194:
                  if ((0x1f000000000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 195:
                  if (curChar == 50)
                     jjAddStates(10, 11);
                  break;
               case 196:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 197:
                  if ((0x3f000000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 198:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 199:
                  if ((0x3f000000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 201:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(201, 202);
                  break;
               case 202:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(202);
                  break;
               case 203:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(203, 204);
                  break;
               case 204:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(204);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAddStates(114, 117);
                  }
                  if ((0x7e00000000L & l) != 0L)
                     jjAddStates(5, 6);
                  break;
               case 81:
                  if ((0x7fffffe80000000L & l) != 0L)
                     jjCheckNAddTwoStates(203, 204);
                  if ((0x7fffffe80000000L & l) != 0L)
                     jjCheckNAddTwoStates(201, 202);
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(204);
                  }
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(202);
                  }
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 205:
                  if ((0x7fffffe80000000L & l) != 0L)
                     jjCheckNAddTwoStates(203, 204);
                  if ((0x7fffffe80000000L & l) != 0L)
                     jjCheckNAddTwoStates(201, 202);
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(204);
                  }
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(202);
                  }
                  break;
               case 80:
                  if ((0x7e00000000L & l) != 0L)
                     jjAddStates(5, 6);
                  break;
               case 83:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 86:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 89:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 92:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 95:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if ((0x7e00000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 103:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 105:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 108:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 109:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 111:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 114:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 117:
                  if ((0x7e00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x7e00000000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 200:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddStates(114, 117);
                  break;
               case 201:
                  if ((0x7fffffe80000000L & l) != 0L)
                     jjCheckNAddTwoStates(201, 202);
                  break;
               case 202:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(202);
                  break;
               case 203:
                  if ((0x7fffffe80000000L & l) != 0L)
                     jjCheckNAddTwoStates(203, 204);
                  break;
               case 204:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(204);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 205 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   13, 120, 2, 147, 50, 81, 103, 11, 12, 49, 196, 198, 189, 1, 190, 192, 
   193, 194, 3, 4, 9, 6, 7, 8, 14, 41, 42, 44, 48, 16, 33, 34, 
   36, 40, 18, 25, 26, 28, 32, 20, 21, 23, 51, 72, 73, 75, 79, 53, 
   64, 65, 67, 71, 55, 56, 57, 59, 63, 98, 99, 101, 124, 132, 141, 142, 
   143, 126, 127, 128, 130, 134, 127, 135, 137, 139, 127, 140, 124, 132, 141, 144, 
   145, 146, 151, 173, 182, 183, 184, 153, 154, 169, 171, 156, 157, 166, 167, 159, 
   160, 165, 162, 163, 164, 175, 154, 176, 178, 180, 154, 181, 151, 173, 182, 185, 
   186, 187, 201, 202, 203, 204, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\72", "\54", "\73", "\50", "\51", "\133", "\135", 
"\46\46", "\174\174", "\41", "\75\75", "\76", "\74", "\76\75", "\74\75", "\52", null, 
null, null, null, "\103\122\105\101\124\105", "\111\115\120\117\122\124", 
"\125\120\104\101\124\105", "\104\105\114\105\124\105", "\116\157\144\145", "\124\171\160\145", 
"\103\157\156\164\141\151\156", "\120\162\157\160\145\162\164\171", 
"\103\157\156\156\145\143\164\151\157\156", "\105\156\144\156\157\144\145\163", "\106\154\157\167", 
"\115\141\164\143\150", "\117\160\145\162\141\164\151\157\156", "\124\141\162\147\145\164", 
"\103\157\156\144\151\164\151\157\156", "\101\143\164\151\157\156", "\121\165\145\162\171", "\106\162\157\155", 
"\120\162\151\157\162\151\164\171", "\124\162\141\156\163\141\143\164\151\157\156", "\102\145\147\151\156", 
"\105\156\144", "\156\157\144\145\163", "\143\157\156\156\145\143\164\151\157\156\163", 
"\146\154\157\167\163", "\157\160\145\162\141\164\151\157\156\163", 
"\116\157\144\145\115\157\144\145\154", "\163\164\162\151\156\147", "\151\156\164\145\147\145\162", 
"\162\141\156\147\145", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffe1fffe1L, 0x1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[205];
static private final int[] jjstateSet = new int[410];
static protected char curChar;
/** Constructor. */
public NEMOparserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public NEMOparserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 205; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
