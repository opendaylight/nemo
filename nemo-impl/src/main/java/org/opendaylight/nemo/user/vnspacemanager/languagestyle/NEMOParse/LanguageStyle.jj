/*
 * Copyright (c) 2015 Huawei, Inc. and others. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */
/**
 * JavaCC file
 */


options {
  JDK_VERSION = "1.7";
}

PARSER_BEGIN(NEMOparser)

package org.opendaylight.nemo.parser;

import org.opendaylight.nemo.user.vnspacemanager.languagestyle.updateintentlang.UpdateNodeLang;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.updateintentlang.UpdateConnectionLang;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.updateintentlang.UpdateFlowlang;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.updateintentlang.UpdateOperationLang;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.deleteintentlang.DeleteNodeLang;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.deleteintentlang.DeleteConnectionLang;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.deleteintentlang.DeleteFlowLang;
import org.opendaylight.nemo.user.vnspacemanager.languagestyle.deleteintentlang.DeleteOperationLang;

import org.opendaylight.controller.md.sal.binding.api.DataBroker;
import org.opendaylight.nemo.user.tenantmanager.TenantManage;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.nemo.common.rev151010.UserId;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.ArrayList;
import java.io.StringReader;
public class NEMOparser
{
  public String parseNEMO(UserId userId,String strNEMO, DataBroker dataBroker, TenantManage tenantManage) throws ParseException
  	{
  	    String strReturn = null ;  	  
  	    ReInit(new StringReader(strNEMO));				
	    try
  		{
           strReturn = NEMO(userId,dataBroker,tenantManage);
  		}
  		catch ( ParseException objException )
  		{
			throw objException;
  		}
  		catch ( TokenMgrError objError )
  		{
			throw new ParseException(objError.getMessage());
  		}				  			  	
		 return strReturn;
	}
}
PARSER_END(NEMOparser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
}
TOKEN :
{
	< COLON: ":" >
|	< COMMA: "," >
|	< SEMICOLON: ";" >
|	< LPAREN: "(" >
|	< RPAREN: ")" >
|   < LBRACKET: "[" >
|   < RBRACKET: "]" >
|	< AND: "&&" >
|	< OR: "||" >
|	< NOT: "!" >
|	< EQUAL: "==" >
|	< GTHAN: ">" >
|	< LTHAN: "<" >
|	< NLTHAN: ">=" >
|	< NMTHAN: "<=" >
|	< #UNDERSCORE: "_" >
|   < #JOINER: "-" >
|	< #FSLASH: "/" >
|	< #DOT: "." >
}

TOKEN :
{
   < CREATE: "CREATE" >
|   < IMPORT: "IMPORT" >
|   < UPDATE: "UPDATE" >
|   < DELETE: "DELETE" >  
|	< NODE: "Node" >
|	< TYPE: "Type" >
|	< CONTAIN: "Contain" >
|	< PROPERTY: "Property" >
|	< CONNECTION: "Connection" >
|	< ENDNODES: "Endnodes" >
|	< FLOW: "Flow" >
|	< MATCH: "Match" >
|	< OPERATION: "Operation" >
|	< TARGET: "Target" >
|	< CONDITION: "Condition" >
|	< ACTION: "Action" >
|	< QUERY: "Query" >
|	< FROM: "From" >
|   < PRIORITY: "Priority" >
|   < TRUE: "true" >
|   < FALSE: "false" >
|   < TRANSACTION: "Transaction" >
|   < BEGIN: "Begin" >
|   < END: "End" >
}
TOKEN :
{
	< UNUMBER: "0" | ["1" - "9"](<DIGIT>)* >
|	< ID: (<LETTER> | <LETTER>(<LETTER> | <DIGIT> | <UNDERSCORE>|< JOINER >)*(<LETTER> | <DIGIT>)+) > 
|   < #DIGIT: ["0" - "9"] >
|	< #LETTER: ["a" - "z"] >
| 	< ETHPREF: <ETHADDR>(<FSLASH>(["1" - "9"] | ["1" - "3"]<DIGIT> | "4"["0" - "8"]))? >
|	< IPV4PREF: <IPV4ADDR>(<FSLASH>(["1" - "9"] | ["1" - "2"]<DIGIT> | "3"["0" - "2"]))? >
| 	< #ETHADDR: ((<HEXDIGIT>){2}<COLON>){5}(<HEXDIGIT>){2} >
|	< #IPV4ADDR: (<UBYTE>"."){3}<UBYTE> >
|	< #UBYTE: (["0" - "9"] | ["1" - "9"]<DIGIT> | "1"(<DIGIT>){2} | "2"["0" - "4"]<DIGIT> | "25"["0" - "5"]) >
|	< #HEXDIGIT: ["0" - "9", "a" - "f"] >
}

String NEMO(UserId userId, DataBroker dataBroker, TenantManage tenantManage ):
{
}
{
  (< CREATE > | < IMPORT > |< UPDATE>)
  {
    return UpdateIntent(userId,dataBroker,tenantManage);  }
| < DELETE >
	{
	  return DeleteIntent(userId,dataBroker,tenantManage);	}
| < QUERY >
	{
	  return Query(userId,dataBroker,tenantManage);	}
}

String UpdateIntent(UserId userId, DataBroker dataBroker, TenantManage tenantManage):
{}
{
  < NODE >
	{
	  return UpdateNode(userId,dataBroker,tenantManage);
	}
| < CONNECTION >
	{
	  return UpdateConnection(userId,dataBroker,tenantManage);
	}
| < FLOW >
	{
	  return  UpdateFlow(userId,dataBroker,tenantManage);
	}
| < OPERATION >
	{
	  return UpdateOperation(userId,dataBroker,tenantManage);
	}}

String DeleteIntent(UserId userId, DataBroker dataBroker, TenantManage tenantManage):
{}
{
  < NODE >
	{
	  return DeleteNode(userId,dataBroker,tenantManage);
	}
| < CONNECTION >
	{
	  return DeleteConnection(userId,dataBroker,tenantManage);
	}
| < FLOW >
	{
	  return  DeleteFlow(userId,dataBroker,tenantManage);
	}
| < OPERATION >
	{
	  return DeleteOperation(userId,dataBroker,tenantManage);
	}}

String UpdateNode(UserId userId, DataBroker dataBroker, TenantManage tenantManage):
{
  	String strReturn = null;
  	Token objNodeNameToken = null;
  	Token objNodeTypeToken = null;
  	Token objContainNodeToken = null;
  	Token objPropertyNameToken = null;
  	Token objPropertyValueToken = null;
  	Token objRangeLeft = null;
  	Token objRangeRight = null;
  	Boolean typeRight=false;
  	List<String> subNodeNameList = new ArrayList<String>();  	
    LinkedHashMap<String,LinkedHashMap<String,String>> properties = new LinkedHashMap<String,LinkedHashMap<String,String>>();
    UpdateNodeLang updateNodelang = new UpdateNodeLang(dataBroker, tenantManage);   
}
{  	
  	objNodeNameToken = < ID >  	
 	< TYPE >
 	objNodeTypeToken = < ID > 	
	(	  < CONTAIN >
	  (
	    objContainNodeToken = < ID >
	    {
	      subNodeNameList.add(objContainNodeToken.image);	    }	    	  )
	  (
	    < COMMA >
	    objContainNodeToken = < ID >
	    {
	      subNodeNameList.add(objContainNodeToken.image);	   
	    }	  )*
	)?
	(	  < PROPERTY >
	 (
	   objPropertyNameToken = < ID >	   
	   < COLON >
	   {
	     LinkedHashMap<String,String> propertyvalue = new LinkedHashMap<String,String>();	   }
	   < LBRACKET >
	   ((objPropertyValueToken = < ID >
		   {
		     propertyvalue.put(objPropertyValueToken.image, "string");		   }
		| objPropertyValueToken=< ETHPREF >
			{
			  propertyvalue.put(objPropertyValueToken.image, "string");			}
		| objPropertyValueToken=< IPV4PREF >
			{
			  propertyvalue.put(objPropertyValueToken.image, "string");			}
		|objPropertyValueToken=< UNUMBER >
		   {
		     propertyvalue.put(objPropertyValueToken.image, "int");		   }
	    |(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
	      {
	        propertyvalue.put(objRangeLeft.image+","+objRangeRight.image,"range");	      }))	   
	   (< COMMA >
	     (objPropertyValueToken = < UNUMBER >
		   {
		     propertyvalue.put(objPropertyValueToken.image,"int");
		   }
		| objPropertyValueToken=< ETHPREF >
			{
			  propertyvalue.put(objPropertyValueToken.image, "string");
			}
		| objPropertyValueToken=< IPV4PREF >
			{
			  propertyvalue.put(objPropertyValueToken.image, "string");
			}
		| objPropertyValueToken=< ID >
			{
			  propertyvalue.put(objPropertyValueToken.image, "string");			}
	    |(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
	      {
	        propertyvalue.put(objRangeLeft.image+","+objRangeRight.image,"range");
	      }))
	   )*
	   < RBRACKET >
	   {
	     properties.put(objPropertyNameToken.image, propertyvalue);	   })
	  )

	  (
	    < COMMA >
	   objPropertyNameToken = < ID >
	   < COLON >
	   {
	     LinkedHashMap<String,String> propertyvalue1 = new LinkedHashMap<String,String>();
	   }
	   < LBRACKET >
	   ((objPropertyValueToken = < ID >
		   {
		     propertyvalue1.put(objPropertyValueToken.image, "string");
		   }
		| objPropertyValueToken=< ETHPREF >
			{
			  propertyvalue1.put(objPropertyValueToken.image, "string");
			}
		| objPropertyValueToken=< IPV4PREF >
			{
			  propertyvalue1.put(objPropertyValueToken.image, "string");
			}
		|objPropertyValueToken=< UNUMBER >
		   {
		     propertyvalue1.put(objPropertyValueToken.image, "int");
		   }
	    |(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
	      {
	        propertyvalue1.put(objRangeLeft.image+","+objRangeRight.image,"range");
	      }))
	   
	   (< COMMA >
	     (objPropertyValueToken = < UNUMBER >
		   {
		     propertyvalue1.put(objPropertyValueToken.image,"int");
		   }
		| objPropertyValueToken=< ETHPREF >
			{
			  propertyvalue1.put(objPropertyValueToken.image, "string");
			}
		| objPropertyValueToken=< IPV4PREF >
			{
			  propertyvalue1.put(objPropertyValueToken.image, "string");
			}
		| objPropertyValueToken=< ID >
			{
			  propertyvalue1.put(objPropertyValueToken.image, "string");
			}
	    |(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
	      {
	        propertyvalue1.put(objRangeLeft.image+","+objRangeRight.image,"range");
	      }))
	   )*
	   < RBRACKET >
	   {
	     properties.put(objPropertyNameToken.image, propertyvalue1);
	   })
	  )*
	 )?
	< SEMICOLON >
	{
	  strReturn = updateNodelang.NodeHandling(userId, objNodeNameToken.image, objNodeTypeToken.image,subNodeNameList, properties);	  return strReturn;
	}
}

String DeleteNode(UserId userId, DataBroker dataBroker, TenantManage tenantManage):
{
  	String strReturn = null;
  	Token objNodeNameToken = null;
  	DeleteNodeLang deleteNodelang = new DeleteNodeLang(dataBroker, tenantManage);   
}
{
  objNodeNameToken = < ID >
  < SEMICOLON >
  {
    strReturn = deleteNodelang.DeleteNodeHandling(userId, objNodeNameToken.image);
    return strReturn;  }
}

String UpdateConnection(UserId userId, DataBroker dataBroker, TenantManage tenantManage):
  {
    String strReturn = null;
    Token objConnNameToken = null;
    Token objConnTypeToken = null;
    Token objConnEndNodeToken = null;
    Token objPropertyNameToken = null;
  	Token objPropertyValueToken = null;
  	Token objRangeLeft = null;
  	Token objRangeRight = null;
    List<String> endNodes = new ArrayList<String>();    
    LinkedHashMap<String,LinkedHashMap<String,String>> properties = new LinkedHashMap<String,LinkedHashMap<String,String>>();
    UpdateConnectionLang updateConnLang = new UpdateConnectionLang(dataBroker,tenantManage);  }
  {
    objConnNameToken = < ID >
    < TYPE >
    objConnTypeToken = < ID >
    (
      < ENDNODES >
      (
        objConnEndNodeToken = < ID >
        {
          endNodes.add(objConnEndNodeToken.image);        }      )
      (
        < COMMA >
        objConnEndNodeToken = < ID >
        {
          endNodes.add(objConnEndNodeToken.image);        }      )+    )?
    (
      < PROPERTY >
      (
	   objPropertyNameToken = < ID >
	   < COLON >
	   {
	     LinkedHashMap<String,String> propertyvalue = new LinkedHashMap<String,String>();	   }
	   < LBRACKET >
	   ((objPropertyValueToken = < ID >
		   {
		     propertyvalue.put(objPropertyValueToken.image, "string");
		   }
		|objPropertyValueToken=< UNUMBER >
		   {
		     propertyvalue.put(objPropertyValueToken.image, "int");
		   }
	    |(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
	      {
	        propertyvalue.put(objRangeLeft.image+","+objRangeRight.image,"range");
	      }))
	   )
	   (< COMMA >
	     (objPropertyValueToken = < UNUMBER >
		   {
		     propertyvalue.put(objPropertyValueToken.image,"int");
		   }
		| objPropertyValueToken=< ID >
			{
			  propertyvalue.put(objPropertyValueToken.image, "string");
			}
	    |(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
	      {
	        propertyvalue.put(objRangeLeft.image+","+objRangeRight.image,"range");
	      }))
	   )*
	   < RBRACKET >
	   {
	     properties.put(objPropertyNameToken.image, propertyvalue);
	   }
	  )

	  (
	    < COMMA >
	   objPropertyNameToken = < ID >
	   < COLON >
	   {
	     LinkedHashMap<String,String> propertyvalue1 = new LinkedHashMap<String,String>();	   }
	   < LBRACKET >
	   ((objPropertyValueToken = < ID >
		   {
		     propertyvalue1.put(objPropertyValueToken.image, "string");
		   }
		|objPropertyValueToken=< UNUMBER >
		   {
		     propertyvalue1.put(objPropertyValueToken.image, "int");
		   }
	    |(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
	      {
	        propertyvalue1.put(objRangeLeft.image+","+objRangeRight.image,"range");
	      }))
	   )
	   (< COMMA >
	     (objPropertyValueToken = < UNUMBER >
		   {
		     propertyvalue1.put(objPropertyValueToken.image,"int");
		   }
		| objPropertyValueToken=< ID >
			{
			  propertyvalue1.put(objPropertyValueToken.image, "string");
			}
	    |(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
	      {
	        propertyvalue1.put(objRangeLeft.image+","+objRangeRight.image,"range");
	      }))
	   )*
	   < RBRACKET >
	   {
	     properties.put(objPropertyNameToken.image, propertyvalue1);
	   }
	  )*    )?
    < SEMICOLON >
    {
      strReturn = updateConnLang.ConnectionHandling(userId, objConnNameToken.image, objConnTypeToken.image,endNodes, properties);
      return strReturn;    }}

String DeleteConnection(UserId userId, DataBroker dataBroker, TenantManage tenantManage):
{
  	String strReturn = null;
  	Token objConnNameToken = null;
  	DeleteConnectionLang deleteConnectionlang = new DeleteConnectionLang(dataBroker, tenantManage);   
}
{
  objConnNameToken = < ID >
  < SEMICOLON >
  {
    strReturn = deleteConnectionlang.DeleteConnectionHandling(userId, objConnNameToken.image);
    return strReturn;
  }
}

String UpdateFlow(UserId userId, DataBroker dataBroker, TenantManage tenantManage):
{
  String strReturn = null;
  Token objFlowNameToken = null;
  Token objFlowMatchItem = null;
  Token objFlowMatchValue = null;
  Token objPropertyNameToken = null;
  Token objPropertyValueToken = null;
  Token objRangeLeft = null;
  Token objRangeRight = null;  
  LinkedHashMap<String,LinkedHashMap<String,String>> matchItems = new LinkedHashMap<String,LinkedHashMap<String,String>>();
  
  LinkedHashMap<String,LinkedHashMap<String,String>> properties = new LinkedHashMap<String,LinkedHashMap<String,String>>();
  UpdateFlowLang updateFlowLang = new UpdateFlowLang(dataBroker, tenantManage);}
{
  objFlowNameToken = < ID >
  (
    < MATCH >
    objFlowMatchItem = < ID >
    < COLON >
    {
      LinkedHashMap<String,String> matchvalue = new LinkedHashMap<String,String>();    }
    (      (objFlowMatchValue = < ID >
	    {
	      matchvalue.put(objFlowMatchValue.image,"string");	    }
	| objFlowMatchValue = < ETHPREF >
		{
		  matchvalue.put(objFlowMatchValue.image,"string");		}
	| objFlowMatchValue = < IPV4PREF >
		{
		  matchvalue.put(objFlowMatchValue.image,"string");		}
  	| objFlowMatchValue = < UNUMBER >
  		{
  		  matchvalue.put(objFlowMatchValue.image,"int");  		}
 	| (< LPAREN >(objRangeLeft=< UNUMBER >)<COMMA >(objRangeRight=< UNUMBER >)<RPAREN >
 		{
 		  matchvalue.put(objRangeLeft.image+","+objRangeRight.image,"range"); 		}))
 	{
 	  matchItems.put(objFlowMatchItem.image,matchvalue); 	}
 	)  
  (
    < COMMA >
    objFlowMatchItem = < ID >
    {
      LinkedHashMap<String,String> matchvalue1 = new LinkedHashMap<String,String>();    }
    < COLON >
    (objFlowMatchValue = < ID >
	    {
	      matchvalue1.put(objFlowMatchValue.image,"string");
	    }
	| objFlowMatchValue = < ETHPREF >
		{
		  matchvalue1.put(objFlowMatchValue.image,"string");		}
	| objFlowMatchValue = < IPV4PREF >
		{
		   matchvalue1.put(objFlowMatchValue.image,"string");		}
  	| objFlowMatchValue = < UNUMBER >
  		{
  		  matchvalue1.put(objFlowMatchValue.image,"int");
  		}
 	| (< LPAREN >(objRangeLeft=< UNUMBER >)<COMMA >(objRangeRight=< UNUMBER >)<RPAREN >
 		{
 		  matchvalue1.put(objRangeLeft.image+","+objRangeRight.image,"range");
 		}))
 	{
 	  matchItems.put(objFlowMatchItem.image,matchvalue1);
 	}   )*
 )
 (
	  < PROPERTY >
	 (
	   objPropertyNameToken = < ID >
	   < COLON >
	   {
	     LinkedHashMap<String,String> propertyvalue = new LinkedHashMap<String,String>();	   }
	   < LBRACKET >
	   ((objPropertyValueToken = < ID >
		   {
		     propertyvalue.put(objPropertyValueToken.image, "string");
		   }
		|objPropertyValueToken=< UNUMBER >
		   {
		     propertyvalue.put(objPropertyValueToken.image, "int");
		   }
	    |(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
	      {
	        propertyvalue.put(objRangeLeft.image+","+objRangeRight.image,"range");
	      }))
	   )
	   (< COMMA >
	     (objPropertyValueToken = < UNUMBER >
		   {
		     propertyvalue.put(objPropertyValueToken.image,"int");
		   }
		| objPropertyValueToken=< ID >
			{
			  propertyvalue.put(objPropertyValueToken.image, "string");
			}
	    |(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
	      {
	        propertyvalue.put(objRangeLeft.image+","+objRangeRight.image,"range");
	      }))
	   )*
	   < RBRACKET >
	   {
	     properties.put(objPropertyNameToken.image, propertyvalue);
	   }
	  )

	  (
	    < COMMA >
	   objPropertyNameToken = < ID >
	   < COLON >
	   {
	     LinkedHashMap<String,String> propertyvalue1 = new LinkedHashMap<String,String>();	   }
	   < LBRACKET >
	   ((objPropertyValueToken = < ID >
		   {
		     propertyvalue1.put(objPropertyValueToken.image, "string");
		   }
		|objPropertyValueToken=< UNUMBER >
		   {
		     propertyvalue1.put(objPropertyValueToken.image, "int");
		   }
	    |(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
	      {
	        propertyvalue1.put(objRangeLeft.image+","+objRangeRight.image,"range");
	      }))
	   )
	   (< COMMA >
	     (objPropertyValueToken = < UNUMBER >
		   {
		     propertyvalue1.put(objPropertyValueToken.image,"int");
		   }
		| objPropertyValueToken=< ID >
			{
			  propertyvalue1.put(objPropertyValueToken.image, "string");
			}
	    |(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
	      {
	        propertyvalue1.put(objRangeLeft.image+","+objRangeRight.image,"range");
	      }))
	   )*
	   < RBRACKET >
	   {
	     properties.put(objPropertyNameToken.image, propertyvalue1);
	   }
	  )*
	 )?
  < SEMICOLON >
  {
    strReturn = updateFlowLang.FlowHandling(userId, objFlowNameToken.image, matchItems, properties);
    return strReturn;  }}

String DeleteFlow(UserId userId, DataBroker dataBroker, TenantManage tenantManage):
{
  	String strReturn = null;
  	Token objFlowNameToken = null;
  	DeleteFlowLang deleteFlowlang = new DeleteFlowLang(dataBroker, tenantManage);   
}
{
  objFlowNameToken = < ID >
  < SEMICOLON >
  {
    strReturn = deleteFlowlang.DeleteFlowHandling(userId, objFlowNameToken.image);
    return strReturn;
  }
}

String UpdateOperation(UserId userId, DataBroker dataBroker, TenantManage tenantManage):
{
  String strReturn = null;
  Token objOperNameToken = null;
  Token objOperTargetToken = null;
  Token objOperPrioToken = null;
  Token objCondRelationToken = null;
  Token objCondNameToken = null;
  Token objCondMatchPattern = null;
  Token objCondTarget = null;
  Token objActionNameToken = null;
  Token objActionValueToken = null;
  Token objRangeLeft = null;
  Token objRangeRight = null;  
  LinkedHashMap<String,LinkedHashMap<String,String>> conditions = new LinkedHashMap<String,LinkedHashMap<String,String>>();
    
  LinkedHashMap<String,LinkedHashMap<String,String>> actions = new LinkedHashMap<String,LinkedHashMap<String,String>>();
  UpdateOperationLang updateOperationLang  = new UpdateOperationLang(dataBroker, tenantManage);}
{
  objOperNameToken = < ID >
  < TARGET >
  objOperTargetToken = < ID >
  < PRIORITY >
  objOperPrioToken = < UNUMBER >
  (
    < CONDITION >
    (
      (objCondRelationToken=< NOT >)?
      < LPAREN >
      objCondNameToken=< ID >
      (objCondMatchPattern=<EQUAL >|objCondMatchPattern=<GTHAN >|objCondMatchPattern=<LTHAN >|objCondMatchPattern=<NLTHAN >|objCondMatchPattern=<NMTHAN >)
      {
        LinkedHashMap<String,String> targetValue = new LinkedHashMap<String,String>();      }
      (		objCondTarget=<ID>
		      {
		        targetValue.put(objCondTarget.image,"string");		      }
      	|	objCondTarget=<UNUMBER>
      		  {
		        targetValue.put(objCondTarget.image,"int");
		      }
      	|(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
      		  {
		        targetValue.put(objRangeLeft.image+","+objRangeRight.image,"range");
		      }))
       < RPAREN >
       {         
         conditions.put(objCondRelationToken.image+","+objCondNameToken.image+","+objCondMatchPattern.image,targetValue);       }    )
    (
    	(objCondRelationToken=< NOT >|objCondRelationToken=< AND >|objCondRelationToken=< OR >)
    	< LPAREN >
	      objCondNameToken=< ID >
	      (objCondMatchPattern=<EQUAL >|objCondMatchPattern=<GTHAN >|objCondMatchPattern=<LTHAN >|objCondMatchPattern=<NLTHAN >|objCondMatchPattern=<NMTHAN >)
	      {
	        LinkedHashMap<String,String> targetValue1 = new LinkedHashMap<String,String>();	      }
	      (		objCondTarget=<ID>
			      {
			        targetValue1.put(objCondTarget.image,"string");
			      }
	      	|	objCondTarget=<UNUMBER>
	      		  {
			        targetValue1.put(objCondTarget.image,"int");
			      }
	      	|(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
	      		  {
			        targetValue1.put(objRangeLeft.image+","+objRangeRight.image,"range");
			      }))
	       < RPAREN >
	       {         
	         conditions.put(objCondRelationToken.image+","+objCondNameToken.image+","+objCondMatchPattern.image,targetValue1);
	       }    )*  )?
  (
    < ACTION >
    (      (
      objActionNameToken = < ID >
      (        < COLON >
        {
          LinkedHashMap<String,String> actionvalues = new LinkedHashMap<String,String>();        }
     (
       < LBRACKET >        objActionValueToken = < ID >
        {
          actionvalues.put(objActionValueToken.image, "string");        }
    | 	objActionValueToken = < UNUMBER >
	    {
	      actionvalues.put(objActionValueToken.image, "int");	    }
    | 	(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
	    {
	      actionvalues.put(objRangeLeft.image+","+objRangeRight.image, "range");	    } ))        
     (
       < COMMA >
        objActionValueToken = < ID >
        {
          actionvalues.put(objActionValueToken.image, "string");
        }
    | 	objActionValueToken = < UNUMBER >
	    {
	      actionvalues.put(objActionValueToken.image, "int");
	    }
    | 	(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
	    {
	      actionvalues.put(objRangeLeft.image+","+objRangeRight.image, "range");
	    }))*
	    < RBRACKET >
	    {
	      actions.put(objActionNameToken.image,actionvalues);	    }
	  )?
     )
    (
      < COMMA >
      (
      objActionNameToken = < ID >
     (               < COLON >
        {
          LinkedHashMap<String,String> actionvalues1 = new LinkedHashMap<String,String>();        }
     (
       < LBRACKET >
        objActionValueToken = < ID >
        {
          actionvalues1.put(objActionValueToken.image, "string");
        }
    | 	objActionValueToken = < UNUMBER >
	    {
	      actionvalues1.put(objActionValueToken.image, "int");
	    }
    | 	(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
	    {
	      actionvalues1.put(objRangeLeft.image+","+objRangeRight.image, "range");
	    }  ))       
     (
       < COMMA >
        objActionValueToken = < ID >
        {
          actionvalues1.put(objActionValueToken.image, "string");
        }
    | 	objActionValueToken = < UNUMBER >
	    {
	      actionvalues1.put(objActionValueToken.image, "int");
	    }
    | 	(< LPAREN >(objRangeLeft = < UNUMBER >)< COMMA >(objRangeRight = < UNUMBER >)< RPAREN >
	    {
	      actionvalues1.put(objRangeLeft.image+","+objRangeRight.image, "range");
	    }))*
	    < RBRACKET >
	    {
	      actions.put(objActionNameToken.image,actionvalues1);
	    }
	  )?
     )    )*  )
)?
  < SEMICOLON >
  {
    strReturn = updateOperationLang.OperationHandling(userId, objOperNameToken.image, objOperTargetToken.image, objOperPrioToken.image,conditions,actions);
    return strReturn;  }}

String DeleteOperation(UserId userId, DataBroker dataBroker, TenantManage tenantManage):
{
  	String strReturn = null;
  	Token objOperationNameToken = null;
  	DeleteOperationLang deleteOperationlang = new DeleteOperationLang(dataBroker, tenantManage);   
}
{
  objOperationNameToken = < ID >
  < SEMICOLON >
  {
    strReturn = deleteOperationlang.DeleteOperationHandling(userId, objOperationNameToken.image);
    return strReturn;
  }
}

